-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Util;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun isNotEmpty(lst) {
  case lst of
    {} -> false
  | _  -> true
  esac 
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal(stack, nArgs, nLocals) {
    case take(stack, nArgs) of
      [remainder, args] ->
        local state = makeState(nArgs, nLocals);
        iter(
          fun ([ind, arg]) { assign(state, Arg(ind), arg) }, 
          zip(arrayList(initArray(nArgs, id)), args)
        );
        [remainder, state]
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (conf, insns) {
    local stack = conf[0];
    local calls = conf[1];
    local state = conf[2];
    local world = conf[3];

    -- Unpleasant C-style because otherwise app runs out of memory :c
    while isNotEmpty(insns) do
      local nextInsns = tl(insns);
      case [hd(insns), stack] of
        [BEGIN(_, nArgs, nLocals), s] -> 
          case createLocal(stack, nArgs, nLocals) of
            [newStack, newState] -> 
              stack := newStack;
              state := newState
          esac
      | [BINOP(opr), x : y : s] -> stack := evalOp(opr, y, x) : s
      | [CALL(fLab, _),      _] -> calls := [state, nextInsns] : calls;
                                   nextInsns := fromLabel(env, fLab) 
      | [CONST(n),           s] -> stack := n : s
      | [CJMP(by, lab),  z : s] ->
          if case by of "z" -> z == 0 | "nz" -> z != 0 esac
          then nextInsns := fromLabel(env, lab)
          fi;
          stack := s
      | [DROP    , _ : s] -> stack := s
      | [END     ,     _] -> case calls of
                               {} -> nextInsns := {}
                             | [retState, retInsn] : cs -> 
                                 calls := cs;
                                 state := retState;
                                 nextInsns := retInsn
                             esac
      | [GLOBAL(x),    _] -> assign(state, Glb(x), 0)
      | [JMP(lab),     _] -> nextInsns := fromLabel(env, lab)
      | [LABEL(x),     _] -> skip 
      | [LD(x)   ,     s] -> stack := lookup(state, x) : s
      | [LDA(x)  ,     s] -> stack := Ref(x) : s
      | [READ    ,     s] -> case readWorld(world) of
                               [n, w] -> stack := n : s;
                                         world := w
                             esac
      | [ST(x)   , z : s] -> assign(state, x, z)
      | [STI     , v : Ref(x) : s] -> stack := v : s;
                                      assign(state, x, v)
      | [WRITE   , z : s] -> stack := s; 
                             world := writeWorld(z, world)
      esac;
      insns := nextInsns
    od;

    [stack, calls, state, world]
  }

  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  local env = ref (initCompEnv());

  local globals = ref({});

  -- flipped list constructor
  infixl :> after : (tail, head) { head : tail }

  infix +++> at :> (tail, head) { head +++ tail }

  infix +> at :> (tail, head) {
    compileSMTo(head, tail)
  }

  infix ++> at :> (acc, args) {
    foldl(fun (acc, arg) { acc +> arg }, acc, args)
  }

  fun genLab() {
    case genLabel(deref(env)) of
      [lab, newEnv] -> env ::= newEnv; lab
    esac
  }

  fun compileFunTo(Fun(fLab, args, body, state), acc) {
    local oldEnv, cBody, res;
    oldEnv := deref(env);
    env ::= addArgs(beginFun(oldEnv, state), args);

    cBody := compileSMTo(body, {});
    res := 
      [ acc
        :>   LABEL(fLab)
        :>   BEGIN(fLab, size(args), getLocals(deref(env)))
        +++> cBody
        :>   END
      , case getFuns(deref(env)) of [funs, _] -> funs esac
      ];

    env ::= oldEnv;
    res
  }

  fun compileSMTo(stmt, acc) {
    case stmt of
      Assn(l, r)      -> acc +> l +> r :> STI
    | Binop(op, l, r) -> acc +> l +> r :> BINOP(op)

    | Call(name, args) ->
        case lookupFun(deref(env), name) of
          Fun(fLab, nArgs) -> acc ++> args :> CALL(fLab, nArgs)
        esac

    | Const(n) -> acc :> CONST(n)

    | If(e, s1, s2) ->
        local elseLab = genLab();
        local outLab  = genLab();
        acc
        +> e
        :> CJMP("z", elseLab)
        +> s1
        :> JMP(outLab)        
        :> LABEL(elseLab)     
        +> s2
        :> LABEL(outLab)

    | Ignore(e) -> acc +> e :> DROP

    | Scope(decls, expr) ->
        local locals, scopeFuns, funLabels, res;

        env ::= beginScope(deref(env));

        locals := filter(
          fun (x) { case x of Local(_) -> true | _ -> false esac }, decls
        );
        -- Forms global declarations if we are on the global level
        globals ::= deref(globals) +++>
          if isGlobal(deref(env))
          then foldl(
            fun (acc, Local(names)) { acc +++> map(fun (x) { GLOBAL(x) }, names) }, 
            {},
            locals)
          else {}
          fi;
        scopeFuns := filter(
          fun (x) { case x of Fun(_, _, _) -> true | _ -> false esac }, decls
        );
          
        funLabels := map(
          fun (f@Fun(name, args, body)) { 
            case genFunLabel(deref(env), name) of
              [fLab, newEnv] -> env ::= newEnv; [f, fLab]
            esac
          },
          scopeFuns
        );

        -- Adds all vars to the environment
        env ::= foldl(
          fun (env, Local(names)) { addVars(env, names) }, deref(env), locals
        );
        -- Adds all funs to the environment
        env ::= foldl(
          fun (env, [Fun(name, args, _), fLab]) { 
            addFun(env, name, fLab, size(args)) 
          },
          deref(env),
          funLabels
        );
        -- Remembers all funs for future compiling
        env ::= foldl(
          fun (env, [Fun(_, args, body), fLab]) { 
            rememberFun(env, fLab, args, body) 
          },
          deref(env),
          funLabels
        );
        
        res := acc +> expr;
        env ::= endScope(deref(env));
        res

    | Seq(s1, s2) -> acc +> s1 +> s2
    | Skip        -> acc
    | Read(x)     -> acc :> READ :> ST(lookupVar(deref(env), x)) :> DROP
    | Ref(x)      -> acc :> LDA(lookupVar(deref(env), x))

    | Repeat(body, cond) -> 
        local bodyLab = genLab();
        acc
        :> LABEL(bodyLab)
        +> body
        +> cond
        :> CJMP("z", bodyLab)

    | Var(x) -> acc :> LD(lookupVar(deref(env), x))

    | While(cond, body) ->
        local condLab = genLab();
        local bodyLab = genLab();
        acc
        :> JMP(condLab)
        :> LABEL(bodyLab)
        +> body
        :> LABEL(condLab)
        +> cond
        :> CJMP("nz", bodyLab)

    | Write(e) -> acc +> e :> WRITE
    esac
  }

  local acc, body, todoFuns;

  -- must be done before `getLocals`
  body := compileSMTo(expr, {});

  acc :=
         deref(globals)
    :>   LABEL("main")
    :>   BEGIN("main", 0, getLocals(deref(env)))
    +++> body
    :>   END;

  todoFuns := case getFuns(deref(env)) of 
                [funs, newEnv] -> env ::= newEnv; funs 
              esac;
  while isNotEmpty(todoFuns) do
    case compileFunTo(hd(todoFuns), acc) of
      [iAcc, iTodo] -> acc := iAcc; 
                       todoFuns := tl(todoFuns) +++ iTodo
    esac
  od;

  reverse(acc)
}
