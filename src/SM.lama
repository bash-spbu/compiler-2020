-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (conf, insns) {
  foldl(fun (c@[stack, state, world], instr) {
    case [stack, instr] of
      [x : y : s, Binop(oprStr)] -> [stringToOpr(oprStr)(y, x) : s, state, world]
    | [s        , Const(n)     ] -> [n : s, state, world]
    | [s        , Read         ] -> case readWorld(world) of 
                                      [n, w] -> [n : s, state, w] 
                                    esac
    | [z : s    , Write        ] -> [s, state, writeWorld(z, world)]
    | [s        , LD(var)      ] -> [state(var) : s, state, world]
    | [z : s    , ST(var)      ] -> [s, state <- [var, z], world]
    esac
  }, conf, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const(n) -> Const(n) : {}
  | Var(x)   -> LD(x) : {}
  | Binop(oprStr, l, r) -> Binop(oprStr) : (compileExpr(r) +++ compileExpr(l))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileSM (stmt) {
    case stmt of
      Skip -> {}
    | Assn(varStr, expr) -> ST(varStr) : compileExpr(expr)
    | Read(varStr) -> {ST(varStr), Read}
    | Write(expr)  -> Write : compileExpr(expr)
    | Seq(s1, s2)  -> compileSM(s2) +++ compileSM(s1)
    esac
  }
  reverse(compileSM(stmt))
}
