-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
fun eval (c@[state, world], stmt) {
  case stmt of
    Skip -> c
  | Assn(varStr, expr) -> [state <- [varStr, evalExpr(state, expr)], world]
  | Read(varStr) ->
      case readWorld(world) of [n, w] -> [state <- [varStr, n], w] esac
  | Write(expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  | Seq(s1, s2) -> eval(eval(c, s1), s2)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
