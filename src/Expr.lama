-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- @type [State, World] -> <Val Int | Ref String | Void>
fun eval (c@[state, world], expr) {
  case expr of
    Const(n)  -> [c, Val(n)]
  | Var(x)    -> [c, state(x)]
  | Ref(x)    -> [c, Ref(x)]
  | Ignore(e) -> [eval(c, e).fst, Void]
  | Binop(op, l, r) -> 
      case evalList(c, {l, r}) of
        [c@[state, world], {Val(n1), Val(n2)}] -> [c, Val(evalOp(op, n1, n2))]
      esac
  | Skip -> [c, Void]
  | Assn(l, r) ->
      case evalList(c, {l, r}) of
        [c@[state, world], {Ref(x), v}] -> [[state <- [x, v], world], v]
      esac
  | Read(x) ->
      case readWorld(world) of 
        [n, w] -> [[state <- [x, Val(n)], w], Void]
      esac
  | Write(e) -> 
      case eval(c, e) of
        [[s, w], Val(n)] -> [[s, writeWorld(n, w)], Void]
      esac
  | Seq(s1, s2) -> 
      case evalList(c, {s1, s2}) of
        [c, {_, r}] -> [c, r]
      esac
  | If(e, s1, s2) ->
      case eval(c, e) of
        [c, Val(n)] ->
          if   n != 0
          then eval(c, s1)
          else eval(c, s2)
          fi
      esac
  | cycle@While(cond, body) ->
      case eval(c, cond) of
        [c, Val(n)] ->
          if   n != 0
          then eval(eval(c, body).fst, cycle)
          else [c, Void]
          fi
      esac
  | Repeat(body, cond) -> 
      eval(eval(c, body).fst, While(Binop("==", cond, Const(0)), body))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
