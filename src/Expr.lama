-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | x       -> error (sprintf ("the name ""%s"" does not designate a variable", x.string), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

fun addBindings (state, names, values) {
  foldl(
    fun (s, [name, v]) { s.addName (name, Var (v)) },
    state,
    zip(names, values)
  )
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDecls (state, decls) {
  foldl(
    fun (state, decl) {
      case decl of
        Local(names)          -> state.addNames(names)
      | Fun(name, args, body) -> state.addFunction(name, args, body) 
      esac
    },
    state,
    decls
  )
}

-- @type [State, World] -> <Val Int | Ref String | 0>
fun eval (c@[state, world], expr) {
  case expr of
    Assn(l, r) ->
      case evalList(c, {l, r}) of
        [c@[state, world], {Ref(x), v}] -> [[state <- [x, Var(v)], world], v]
      esac

  | Binop(op, l, r) ->  
      case evalList(c, {l, r}) of
        [c@[state, world], {n1, n2}] -> [c, evalOp(op, n1, n2)]
      esac

  | Call(name, args) ->
      -- checkFun(state, name); -- Comment out because of lack of memory
      case state.lookup(name) of 
        Fun(argNames, body) ->
          case evalList(c, args) of
            [[beforeEnter, world], values] ->
              local afterEnter =
                addBindings(enterFunction(beforeEnter), argNames, values);
              case eval([afterEnter, world], body) of
                [[afterBody, world], res] -> 
                  [[leaveFunction(beforeEnter, afterBody.getGlobal), world], res]
              esac
          esac
      esac

  | Const(n) -> [c, n]

  | If(e, s1, s2) ->
      case eval(c, e) of
        [c, n] ->
          if   n != 0
          then eval(c, s1)
          else eval(c, s2)
          fi
      esac

  | Ignore(e) -> [eval(c, e).fst, 0]

  | Scope(decls, expr) ->
      case eval([evalDecls(enterScope(state), decls), world], expr) of
        [[afterEval, world], res] -> [[afterEval.leaveScope, world], res]
      esac

  | Seq(s1, s2) -> 
      case evalList(c, {s1, s2}) of
        [c, {_, r}] -> [c, r]
      esac

  | Skip -> [c, 0]

  | Read(x) ->
      case readWorld(world) of 
        [n, w] -> [[state <- [x, Var(n)], w], 0]
      esac

  | Ref(x) -> [c, Ref(x)]

  | Repeat(body, cond) -> 
      eval(eval(c, body).fst, While(Binop("==", cond, Const(0)), body))

  | Var(x) -> 
      -- state.checkVar(x); -- Comment out because of lack of memory
      case state.lookup(x) of
        Var(v) -> [c, v]
      esac

  | cycle@While(cond, body) ->
      case eval(c, cond) of
        [c, n] ->
          if   n != 0
          then eval(eval(c, body).fst, cycle)
          else [c, 0]
          fi
      esac

  | Write(e) -> 
      case eval(c, e) of
        [[s, w], n] -> [[s, writeWorld(n, w)], 0]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
