-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import Fun;
import SM;
import Collection;
import List;
import Util;
import Manifest;
import Array;

-- Assembler language interface
-- The registers: 
local regs = ["%ebx", "%ecx", "%esi", "%edi", "%eax", "%edx", "%ebp", "%esp"];

-- We can not freely operate with all register; only with 4 by now
local nRegs = regs.length - 5;

-- For convenience we define the following synonyms for the registers: 
local ebx = R (0),
      ecx = R (1),
      esi = R (2),
      edi = R (3),
      eax = R (4),
      edx = R (5),
      ebp = R (6),
      esp = R (7);

-- We need to know the word size to calculate offsets correctly
local wordSize = 4;

-- We need to distinguish the following operand types: 
--    R (int)       -- hard register                    
--    S (int)       -- a position on the hardware stack 
--    M (string)    -- a named memory location          
--    L (int)       -- an immediate operand
--    I (int, opnd) -- an indirect operand with offset

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Lea   (opnd, opnd)         -- loads an address of the first operand into the second
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name
--   Jmp   (string)             -- unconditional jump to a label
--   CJmp  (string, string)     -- conditional jump to a label
--   Label (string)             -- a label
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
                                                               
-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"   -> "addl"
    | "-"   -> "subl"
    | "*"   -> "imull"
    | "&&"  -> "andl"
    | "!!"  -> "orl" 
    | "^"   -> "xorl"
    | "cmp" -> "cmpl"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i)    -> regs [i]
    | S (i)    ->  if i >= 0
                   then sprintf ("-%d(%%ebp)", (i+1) * wordSize)
                   else sprintf ("%d(%%ebp)", 8 + (-1-i) * wordSize)
                   fi

    | M (x)    -> x
    | L (i)    -> sprintf ("$%d", i)
    | I (0, x) -> sprintf ("(%s)", opndString (x))
    | I (n, x) -> sprintf ("%d(%s)", n, opndString (x))
    esac
  }

  case insn of
    Cltd               -> "\tcltd\n"
  | Set   (suf, s)     -> sprintf ("\tset%s\t%s\n", suf, s)
  | IDiv  (s1)         -> sprintf ("\tidivl\t%s\n", opndString (s1))
  | Binop (op, s1, s2) -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s1), opndString (s2))
  | Lea   (s1, s2)     -> sprintf ("\tleal\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Mov   (s1, s2)     -> sprintf ("\tmovl\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Push  (s)          -> sprintf ("\tpushl\t%s\n", opndString (s))
  | Pop   (s)          -> sprintf ("\tpopl\t%s\n", opndString (s))
  | Ret                -> "\tret\n"
  | Call  (p)          -> sprintf ("\tcall\t%s\n", p)
  | Label (l)          -> sprintf ("%s:\n", l)
  | Jmp   (l)          -> sprintf ("\tjmp\t%s\n", l)
  | CJmp  (c, l)       -> sprintf ("\tj%s\t%s\n", c, l)
  | Meta  (m)          -> m
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names
--    a barrier condition (set up right after an unconditional jump is interpreter)
--    a stack map which maps labels to symbolic stacks

fun makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", stack.string, stackSlots, elements (globals).string)
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case 
      case stack of
        {}        -> [ebx, 0]
      | S (n) : _ -> [S (n+1), n+2]
      | R (n) : _ -> if n < nRegs then [R (n+1), stackSlots] else [S (0), 1] fi
      | _         -> [S (0), 1]
      esac
    of [x, n] -> [x, makeEnv (x : stack, if n > stackSlots then n else stackSlots fi, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    makeEnv (y : stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      x : stack -> [x, makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      x : y : stack -> [x, y, makeEnv (stack, stackSlots, globals, strings, stringIndex, barrier, stackMap, fLabel, nLocals)]
    esac
  }

  -- Peeks the top of the symbolic stack
  fun peek () {
    stack.fst
  }
  
  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)), strings, stringIndex, barrier, stackMap, fLabel, nLocals)
  }

  -- References an allocation
  fun loc (alloc) {
    case alloc of
      Glb (x) -> M (globalName (x))
    | Arg (i) -> S (-1-i)
    | Loc (i) -> S (i)
    esac
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    globals.elements
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  -- Gets barrier condition
  fun isBarrier () {
    barrier
  }

  -- Sets barrier condition
  fun setBarrier () {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, true, stackMap, fLabel, nLocals)
  }

  -- Associates the current symbolic state with a label
  fun setStack (l) {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, addMap (stackMap, l, stack), fLabel, nLocals)
  }

  -- Retrieves a stack for a label
  fun retrieveStack (l) {
    case findMap (stackMap, l) of
      None         -> makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
    | Some (stack) -> makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nLocals)
    esac
  }

  -- Sets the label of current function
  fun enterFunction (fLabel, nL) {
    makeEnv (stack, stackSlots, globals, strings, stringIndex, false, stackMap, fLabel, nL)
  }

  -- Gets the label of current function
  fun currentFunction () {
    fLabel
  }

  -- Gets the list of live registers past given symbolic stack depth
  fun liveRegisters (depth) {
    fun inner (d, acc, st) {
      case st of
        {}             -> acc
      | (r@R (_)) : tl -> inner (d+1, if d >= depth then r : acc else acc fi, tl)
      | _         : tl -> inner (d+1, acc, tl)
      esac
    }

    inner (0, {}, stack)
  }

  -- Registers a string literal and assigns it a name
  fun addString (s) {
    local escaped = makeString ((s.length + 1) * 2), i = 0, j = 0, name = sprintf ("string_%d", stringIndex);

    for skip, i < s.length, i := i+1 do
      case s[i] of
        '"'  -> escaped [j] :='"'; escaped [j+1] := '"'; j := j+2
      | '\n' -> escaped [j] :='\'; escaped [j+1] := 'n'; j := j+2
      | '\t' -> escaped [j] :='\'; escaped [j+1] := 't'; j := j+2
      | c    -> escaped [j] := c; j := j+1
      esac
    od;
    
    [makeEnv (stack, stackSlots, globals, addSet (strings, [name, substring (escaped, 0, j)]), stringIndex+1, false, stackMap, fLabel, nLocals),
     name]
  }

  -- Gets a list of all string literals and their names
  fun getStrings () {
    elements (strings)
  }

  -- Gets a local static size for the current function
  fun staticSize () {
    nLocals + stackSlots
  }
  
  [envString,
   allocate,
   push,
   pop,
   pop2,
   addGlobal,
   loc,
   getGlobals,
   getStackSize,
   peek,
   isBarrier,
   setBarrier,
   setStack,
   retrieveStack,
   enterFunction,
   currentFunction,
   liveRegisters,
   addString,
   getStrings,
   staticSize]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

fun peek (env) {
  env [9] ()
}

fun isBarrier (env) {
  env [10] ()
}

fun setBarrier (env) {
  env [11] ()
}

fun setStack (env, l) {
  env [12] (l)
}

fun retrieveStack (env, l) {
  env [13] (l)
}

fun enterFunction (env, fLabel, nA) {
  env [14] (fLabel, nA)
}

fun currentFunction (env) {
  env [15] ()
}

fun liveRegisters (env, depth) {
  env [16] (depth)
}

fun addString (env, s) {
  env [17] (s)
}

fun getStrings (env) {
  env [18] ()
}

fun staticSize (env) {
  env [19] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv ({}, 0, emptySet (), emptySet (), 0, false, emptyMap (), "", 0)
}

-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  Meta ("\t.text\n") : text
}

-- Generates data section
fun dataSection (text) {
  Meta ("\t.data\n") : text
}

-- Generates integer definition
fun intDef (name) {
  singleton (Meta (sprintf ("%s:\t.int\t0\n", name)))
}

-- Generates string definition
fun stringDef ([name, val]) {
  singleton (Meta (sprintf ("%s:\t.string\t""%s""\n", name, val)))
}

-- Generates function prologue
fun prologue (fLabel) {
  {Push  (ebp),
   Mov   (esp, ebp),
   Binop ("-", M (sprintf ("$%s_SIZE", fLabel)), esp)
  }
}

-- Generates function epilogue
fun epilogue (env) {
  local metaDef = Meta (sprintf ("\t.set\t%s_SIZE,\t%d\n", env.currentFunction, env.staticSize * wordSize));

  if compare (env.currentFunction, "main") == 0
  then [env, {Mov (ebp, esp), Pop (ebp), Binop ("^", eax, eax), Ret, metaDef}]
  else case env.pop of
         [y, env] -> [env, {Mov (ebp, esp), Pop (ebp), Mov (y, eax), Ret, metaDef}]
       esac
  fi
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | _     -> false
  esac
}

-- Checks if an operand resides in memory
fun isRegOpnd (opnd) {
  case opnd of
    R (_) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then {Mov (from, eax), Mov (eax, to)}
  else singleton (Mov (from, to))
  fi
}

-- Generates a binary operation between locations, using
-- intermediate register if needed
fun bincmd (l, r, cons) {
  if memOpnd (l) && memOpnd (r)
  then {Mov (l, eax), cons(eax, r)}
  else singleton (cons(l, r))
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

fun setZero(item) {
  case item of
    R(_) -> Binop("^", item, item)
  | S(_) -> Mov(L(0), item)
  esac
}

fun isSimpleArith(opr) {
  case opr of
    "+" -> true
  | "-" -> true
  | "^" -> true
  | _   -> false
  esac
}

fun isLogical(opr) {
  case opr of
    "&&" -> true
  | "!!" -> true
  | _    -> false
  esac
}

fun isComparison(opr) {
  case opr of
    "<"  -> true
  | "<=" -> true
  | ">"  -> true
  | ">=" -> true
  | "==" -> true
  | "!=" -> true
  | _    -> false
  esac
}

fun compileBinop(opr, s, d) {
  if   opr.isSimpleArith then 
    bincmd(s, d, fun (l, r) { Binop(opr, l, r) })
  elif opr.isLogical then
    {setZero(eax), Binop("cmp", s, eax), Set(suffix("!="), "%al"), -- %al := s != 0
     setZero(edx), Binop("cmp", d, edx), Set(suffix("!="), "%dl"), -- %dl := d != 0
     Binop(opr, edx, eax), Mov(eax, d)}
  elif opr.isComparison then
     -- V only %edx is allowed here, %eax is already used in comparison
     --                 V --- %eax used here
     setZero(edx) : bincmd(s, d, fun (l, r) { Binop("cmp", l, r) }) 
        +++ {Set(suffix(opr), "%dl"), Mov(edx, d)}
  else
    case opr of
      "*" -> if   d.isRegOpnd 
             then singleton(Binop("*", s, d)) 
             else {Mov(d, eax), Binop("*", s, eax), Mov(eax, d)} 
             fi 
    | "/" -> {Mov(d, eax), Cltd, IDiv(s), Mov(eax, d)}
    | "%" -> {Mov(d, eax), Cltd, IDiv(s), Mov(edx, d)}
    | _ -> failure("Unknown operator: %s\n", opr)
    esac
  fi
}

fun genCallCodeTo(env, fLab, nArgs, code) {
  local isArray   = case fLab of "Barray" -> Some(nArgs) | _ -> None esac;
  local liveRegs  = liveRegisters(env, nArgs);
  local storeArgs = foldlArray(
    fun ([env, insns], _) { 
      case pop(env) of [a, env] -> [env, Push(a) : insns] esac
    },
    [env, {}], 
    initArray(nArgs, id)
  );

  case fLab of
    "Bread"  -> fLab := "Lread"
  | "Bwrite" -> fLab := "Lwrite"
  | _        -> skip
  esac;

  case storeArgs of
    [env, storeArgs] -> 
      case allocate(env) of
        [res, env] -> 
          [ env
          , code 
            : { map(fun (r) { Push(r) }, liveRegs)
              , reverse(storeArgs)
              , case isArray of Some(n) -> Push(L(n)) | _ -> {} esac
              , Call(fLab)
              , Binop("+", 
                  L(wordSize * 
                     (size(storeArgs) + 
                       case isArray of Some(_) -> 1 | None -> 0 esac))
                    , esp)
              , map(fun (r) { Pop(r) }, reverse(liveRegs))
              , Mov(eax, res)
              }
          ]
      esac
  esac
}

-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (env, code) {
  foldl (fun ([env, scode], i) {
    local code = scode : singleton (Meta ("# " ++ showSMInsn (i) ++ "\n"));
    case i of
      ARRAY(n) -> genCallCodeTo(env, "Barray", n, code)
    | BEGIN(fLab, _, nLocals) -> 
        [enterFunction(env, fLab, nLocals), code : prologue(fLab)]
    | BINOP(opr) ->
        case pop2(env) of
          [s, d, env] -> [push(env, d), code : compileBinop(opr, s, d)]
        esac
    | BUILTIN(fLab, nArgs) -> genCallCodeTo(env, "B" ++ fLab, nArgs, code)
    | CALL   (fLab, nArgs) -> genCallCodeTo(env,        fLab, nArgs, code)
    | CJMP(c, l) -> 
        case pop(env) of
          [s, env] -> [setStack(env, l), code : {Binop("cmp", L(0), s), CJmp(c, l)}]
        esac
    | CONST(n) -> 
        case allocate(env) of
          [s, env] -> [env, code : singleton(Mov(L(n), s))]
        esac
    | DROP -> case pop(env) of [_, env] -> [env, code] esac
    | ELEM -> genCallCodeTo(env, "Belem", 2, code)
    | END  -> case epilogue(env) of
                [env, epCode] -> [env, code : epCode]
              esac
    | GLOBAL(x) -> [addGlobal(env, x), code]
    | JMP(l)    -> [setBarrier(setStack(env, l)), code : singleton(Jmp(l))]
    | LABEL(l)  -> [ if isBarrier(env) then retrieveStack(env, l) else env fi
                   , code : singleton(Label(l))
                   ]
    | LD(x) ->
        case allocate(env) of
          [s, env] -> [env, code : move(loc(env, x), s)]
        esac
    | LDA(x) ->
        case allocate(env) of
          [s, env] -> [env, code : bincmd(loc(env, x), s, fun(l, r) { Lea(l, r) })]
        esac       
    | ST(x) -> [env, code : move(peek(env), loc(env, x))]
    | STA -> genCallCodeTo(env, "Bsta", 2, code)
    | STI ->
        case pop2(env) of
          [v, x, env] -> 
            [ push(env, x)
            , code : 
                if   x.isRegOpnd 
                then move(v, I(0, x)) +++ move(v, x)
                else move(x, edx) +++ move(v, I(0, edx)) +++ move(v, x)
                fi
            ]
        esac
    | STRING(str) -> 
        case addString(env, str) of
          [env, sLab] -> 
            case allocate(env) of 
              [s, env] ->
                genCallCodeTo(
                  env, "Bstring", 1, 
                  {code, move(M("$" ++ sLab), s)}
                )
            esac
        esac
    esac
  }, [env, {}], code)
}


-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (initEnv (), code) of
    [env, code] ->
       local asmFile = args.getBaseName ++ ".s",
             runtime = case getEnv ("LAMA_RUNTIME") of
                         #unboxed -> "../runtime/"
                       | path     -> path
                       esac ++ "/runtime.o";
       
       fwrite (asmFile,
               map (insnString, 
                    deepFlatten ({
                      Meta ("\t.global\tmain\n"),
                      dataSection (
                        {map (intDef, getGlobals (env)), 
                         map (stringDef, getStrings (env))}
                      ),
                      codeSection (code)
                    })).stringcat);
                    
       system ({"gcc -g -m32 -o ", args.getBaseName, " ", runtime, " ", asmFile}.stringcat)
  esac
}
